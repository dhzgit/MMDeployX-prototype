# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.19)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget mmdeploy_ncnn_ops_obj mmdeploy_core mmdeploy_opencv_utils mmdeploy_cpu_device mmdeploy_graph mmdeploy_directory_model mmdeploy_transform mmdeploy_cpu_transform_impl mmdeploy_transform_module mmdeploy_ncnn_net mmdeploy_net_module mmdeploy_mmcls mmdeploy_mmdet mmdeploy_mmseg mmdeploy_mmocr mmdeploy_mmedit mmdeploy_mmpose mmdeploy_classifier mmdeploy_detector mmdeploy_segmentor mmdeploy_text_detector mmdeploy_text_recognizer mmdeploy_pose_detector mmdeploy_restorer mmdeploy_model MMDeployStaticModules MMDeployDynamicModules MMDeployLibs)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target mmdeploy_ncnn_ops_obj
add_library(mmdeploy_ncnn_ops_obj INTERFACE IMPORTED)

set_target_properties(mmdeploy_ncnn_ops_obj PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:ncnn>"
)

# Create imported target mmdeploy_core
add_library(mmdeploy_core STATIC IMPORTED)

set_target_properties(mmdeploy_core PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "MMDEPLOY_STATUS_USE_SOURCE_LOCATION=1"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/cpp"
  INTERFACE_LINK_LIBRARIES "spdlog::spdlog"
)

# Create imported target mmdeploy_opencv_utils
add_library(mmdeploy_opencv_utils STATIC IMPORTED)

set_target_properties(mmdeploy_opencv_utils PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_gapi;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_stitching;opencv_video;opencv_videoio"
)

# Create imported target mmdeploy_cpu_device
add_library(mmdeploy_cpu_device STATIC IMPORTED)

set_target_properties(mmdeploy_cpu_device PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:Threads::Threads>"
)

# Create imported target mmdeploy_graph
add_library(mmdeploy_graph STATIC IMPORTED)

set_target_properties(mmdeploy_graph PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_directory_model
add_library(mmdeploy_directory_model STATIC IMPORTED)

set_target_properties(mmdeploy_directory_model PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_transform
add_library(mmdeploy_transform STATIC IMPORTED)

set_target_properties(mmdeploy_transform PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_cpu_transform_impl
add_library(mmdeploy_cpu_transform_impl STATIC IMPORTED)

set_target_properties(mmdeploy_cpu_transform_impl PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_transform>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_transform_module
add_library(mmdeploy_transform_module STATIC IMPORTED)

set_target_properties(mmdeploy_transform_module PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_transform>"
)

# Create imported target mmdeploy_ncnn_net
add_library(mmdeploy_ncnn_net STATIC IMPORTED)

set_target_properties(mmdeploy_ncnn_net PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_ncnn_ops_obj>;\$<LINK_ONLY:ncnn>"
)

# Create imported target mmdeploy_net_module
add_library(mmdeploy_net_module STATIC IMPORTED)

set_target_properties(mmdeploy_net_module PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_mmcls
add_library(mmdeploy_mmcls STATIC IMPORTED)

set_target_properties(mmdeploy_mmcls PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_mmdet
add_library(mmdeploy_mmdet STATIC IMPORTED)

set_target_properties(mmdeploy_mmdet PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_mmseg
add_library(mmdeploy_mmseg STATIC IMPORTED)

set_target_properties(mmdeploy_mmseg PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_mmocr
add_library(mmdeploy_mmocr STATIC IMPORTED)

set_target_properties(mmdeploy_mmocr PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_transform>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_mmedit
add_library(mmdeploy_mmedit STATIC IMPORTED)

set_target_properties(mmdeploy_mmedit PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:opencv_core>"
)

# Create imported target mmdeploy_mmpose
add_library(mmdeploy_mmpose STATIC IMPORTED)

set_target_properties(mmdeploy_mmpose PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>;\$<LINK_ONLY:mmdeploy_transform>;\$<LINK_ONLY:mmdeploy_opencv_utils>"
)

# Create imported target mmdeploy_classifier
add_library(mmdeploy_classifier STATIC IMPORTED)

set_target_properties(mmdeploy_classifier PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_detector
add_library(mmdeploy_detector STATIC IMPORTED)

set_target_properties(mmdeploy_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_segmentor
add_library(mmdeploy_segmentor STATIC IMPORTED)

set_target_properties(mmdeploy_segmentor PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_text_detector
add_library(mmdeploy_text_detector STATIC IMPORTED)

set_target_properties(mmdeploy_text_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_text_recognizer
add_library(mmdeploy_text_recognizer STATIC IMPORTED)

set_target_properties(mmdeploy_text_recognizer PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_pose_detector
add_library(mmdeploy_pose_detector STATIC IMPORTED)

set_target_properties(mmdeploy_pose_detector PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_restorer
add_library(mmdeploy_restorer STATIC IMPORTED)

set_target_properties(mmdeploy_restorer PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target mmdeploy_model
add_library(mmdeploy_model STATIC IMPORTED)

set_target_properties(mmdeploy_model PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/c"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:mmdeploy_core>"
)

# Create imported target MMDeployStaticModules
add_library(MMDeployStaticModules INTERFACE IMPORTED)

set_target_properties(MMDeployStaticModules PROPERTIES
  INTERFACE_LINK_LIBRARIES "mmdeploy_cpu_device;mmdeploy_graph;mmdeploy_directory_model;mmdeploy_transform;mmdeploy_cpu_transform_impl;mmdeploy_transform_module;mmdeploy_ncnn_net;mmdeploy_net_module;mmdeploy_mmcls;mmdeploy_mmdet;mmdeploy_mmseg;mmdeploy_mmocr;mmdeploy_mmedit;mmdeploy_mmpose"
)

# Create imported target MMDeployDynamicModules
add_library(MMDeployDynamicModules INTERFACE IMPORTED)

# Create imported target MMDeployLibs
add_library(MMDeployLibs INTERFACE IMPORTED)

set_target_properties(MMDeployLibs PROPERTIES
  INTERFACE_LINK_LIBRARIES "mmdeploy_core;mmdeploy_opencv_utils;mmdeploy_classifier;mmdeploy_detector;mmdeploy_segmentor;mmdeploy_text_detector;mmdeploy_text_recognizer;mmdeploy_pose_detector;mmdeploy_restorer;mmdeploy_model"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/MMDeployTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
